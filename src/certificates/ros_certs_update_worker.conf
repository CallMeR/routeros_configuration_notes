## Fox RouterOS Certificates Updater
:local LetsencryptURL "https://letsencrypt.org/certs/isrgrootx1.pem";
:local MkcertURL "https://mkcert.org/generate/all/except/nothing";
:local IsrgUnsafe "isrgrootx1_unsafe";
:local GetCertExpire;
:local LenCertExpire;
:local DnsHttps;
:local DnsVerify;
:local DnsChanged;
:local GetIsrgID;
:local LenIsrgID;
:local IsrgFile;
:local IsrgFileSize;
:local UseCert;
:local Fetched;
:local IsrgFetch;
:local MkcertFetch;
:local GetMkcertID;
:local LenMkcertID;
:local MkcertFile;
:local MkcertFileSize;
:local Date;

## Initiate Check on Certificate Expiring within 45 Days
:set GetCertExpire [/certificate find where expires-after < 45d ];
:set LenCertExpire [:len $GetCertExpire ];

:if ($LenCertExpire > 0) do={
    /certificate remove $GetCertExpire;
    :set MkcertFetch true;
    :log info ("Detected $LenCertExpire certificate(s) that need updating.");
}
## End Certificate Check

## Initiate Check on DNS Resolution Influence
:set DnsHttps [/ip dns get use-doh-server ];
:set DnsVerify [/ip dns get verify-doh-cert ];

:if ($DnsHttps != "" && $DnsVerify) do={
    /ip dns cache flush
    :delay 3s;

    :do {
        # Attempt to resolve domains
        :resolve letsencrypt.org;
        :resolve mkcert.org;
    } on-error={
        # Temporarily disable DoH certificate verification if DNS resolution fails
        /ip dns set verify-doh-cert=no
        :delay 1s;
        :set DnsChanged true;
        :set MkcertFetch true;
        :log warning ("DoH cert verification disabled due to validation failure.");
    }

}
## End DNS Resolution Check

## Initiate Check on Root CA 'isrg*' Existence
:set GetIsrgID [/certificate find where name ~ "isrg*" ];
:set LenIsrgID [:len $GetIsrgID];

:if ($LenIsrgID = 0) do={
    :set IsrgFile $IsrgUnsafe;
    :set UseCert false;
} else={
    :set GetIsrgID [/certificate find where name=$IsrgUnsafe ];
    :set LenIsrgID [:len $GetIsrgID ];

    :if ($LenIsrgID > 0) do={
        :set UseCert true;
        :set IsrgFetch true;
    } else={
        :onerror e {
            :retry command={
                :set Date [/system clock get date ];
                :set IsrgFile "isrgrootx1_test_$Date";
                :resolve letsencrypt.org;
                :delay 2s;
                /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$IsrgFile;
                :delay 3s;
                /file remove $IsrgFile;
                :set UseCert true;
                :set IsrgFetch false;
                :log info ("ISRG cert is up to date.")
            } delay=10s max=3;
        } do={
            /certificate remove [find where name ~ "isrg*" ];
            :set UseCert false;
            :log info ("ISRG cert requires update. Updating...");
            :delay 3s;
        }
    }

}
## End Root CA 'isrg*' Check

## Initiate Check on Mkcert CA 'mkcert*' Existence
:set GetMkcertID [/certificate find where name ~ "mkcert*" ];
:set LenMkcertID [:len $GetMkcertID];

:if ($LenMkcertID = 0) do={
    :set MkcertFetch true;
}
## End Mkcert CA 'mkcert*' Check

## Initiate Root CA Update Process
:if (!$UseCert) do={
    :log info ("ISRG cert not detected. Updating...");

    :onerror e {
        :retry command={
            :resolve letsencrypt.org;
            :delay 2s;
            /tool fetch url=$LetsencryptURL check-certificate=no dst-path=$IsrgFile;
            :set Fetched true;
        } delay=10s max=3;
    } do={
        # Failed to fetch the cert
        :set Fetched false;
        :set IsrgFetch false;
        :set MkcertFetch false;
        :log warning ("Failed to download the ISRG cert. Aborting...");
    }

    :delay 5s;

    :if ($Fetched) do={
        :set IsrgFileSize [/file get $IsrgFile size ];

        # If download is successful (file size > 1000), import the certificate
        :if ($IsrgFileSize > 1000) do={
            /certificate import name=$IsrgFile passphrase="" file-name=$IsrgFile;
            :set IsrgFetch true;
            :delay 3s;
        } else={
            /file remove $IsrgFile;
            :set IsrgFetch false;
            :set MkcertFetch false;
            :log warning ("ISRG cert is truncated. Size: $IsrgFileSize. Aborting...");
        }

    }

}

:if ($IsrgFetch) do={
    :set Date [/system clock get date ];
    :set IsrgFile "isrgrootx1_$Date";
    :log info ("Unsafe ISRG cert detected. Updating...");

    :onerror e {
        :retry command={
            :resolve letsencrypt.org;
            :delay 2s;
            /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$IsrgFile;
            :set Fetched true;
        } delay=10s max=3;
    } do={
        # Failed to fetch the cert
        :set Fetched false;
        :set MkcertFetch false;
        :log warning ("Failed to download the ISRG cert. Aborting...");
    }

    :delay 5s;

    :if ($Fetched) do={
        :set IsrgFileSize [/file get $IsrgFile size ];

        # If download is successful (file size > 1000), import the certificate
        :if ($IsrgFileSize > 1000) do={
            /certificate remove [find where name ~ "isrg*" ];
            :delay 3s;
            /certificate import name=$IsrgFile passphrase="" file-name=$IsrgFile;
            :set MkcertFetch true;
            :log info ("ISRG cert update completed.");
            :delay 3s;
        } else={
            /file remove $IsrgFile;
            :set MkcertFetch false;
            :log warning ("ISRG cert is truncated. Size: $IsrgFileSize. Aborting...");
        }

    }

}
## End Root CA Update Process

## Initiate Mkcert CA Update Process
:if ($MkcertFetch) do={
    :set Date [/system clock get date ];
    :set MkcertFile "mkcert_$Date";
    :log info ("Mkcert cert requires update. Updating...");

    :onerror e {
        :retry command={
            :resolve mkcert.org;
            :delay 2s;
            /tool fetch url=$MkcertURL check-certificate=yes dst-path=$MkcertFile;
            :set Fetched true;
        } delay=10s max=3;
    } do={
        # Failed to fetch the cert
        :set Fetched false;
        :log warning ("Failed to download the Mkcert cert. Aborting...");
    }

    :delay 5s;

    :if ($Fetched) do={
        :set MkcertFileSize [/file get $MkcertFile size ];

        # If download is successful (file size > 200000), import the certificate
        :if ($MkcertFileSize > 200000) do={
            /certificate remove [find where name ~ "mkcert*" ];
            :delay 3s;
            /certificate import name=$MkcertFile passphrase="" file-name=$MkcertFile;
            :log info ("Mkcert cert update completed.");
            :delay 3s;
        } else={
            /file remove $MkcertFile;
            :log warning ("Mkcert cert is truncated. Size: $MkcertFileSize. Aborting...");
        }

    }

} else={
    :log info ("Mkcert cert update skipped.")
}
## End Mkcert CA Update Process

## Initiate DoH Restoration
:if ($DnsChanged) do={
    # Re-enable DoH certificate verification
    /ip dns set verify-doh-cert=yes
    :delay 1s;
    /ip dns cache flush
    :delay 3s;

    :do {
        # Attempt to resolve domains
        :resolve letsencrypt.org;
        :resolve mkcert.org;
        :log warning ("DoH cert verification restored.");
    } on-error={
        # If DNS resolution fails, disable DoH certificate verification
        /ip dns set verify-doh-cert=no
        :delay 1s;
        :log warning ("DoH cert verification restoration failed due to validation failure.");
    }

}
## End DoH Restoration

## Fox RouterOS Certificates Updater End

