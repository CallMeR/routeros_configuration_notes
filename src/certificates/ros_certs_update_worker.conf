## Fox RouterOS Certificates Updater
:local LetsencryptURL "https://letsencrypt.org/certs/isrgrootx1.pem";
:local MkcertURL "https://mkcert.org/generate/all/except/nothing";
:local IsrgUnsafe "isrgrootx1_unsafe";
:local GetCertExpire;
:local LenCertExpire;
:local DnsHttps;
:local DnsVerify;
:local DnsChanged;
:local GetIsrgID;
:local LenIsrgID;
:local IsrgFile;
:local IsrgFileSize;
:local UseCert;
:local IsrgChecked;
:local MkcertFetch;
:local GetMkcertID;
:local LenMkcertID;
:local MkcertFile;
:local MkcertFileSize;
:local Date;

## Initiate Check on Certificate Expiring within 45 Days
:set GetCertExpire [/certificate find where expires-after < 45d ];
:set LenCertExpire [:len $GetCertExpire ];

:if ($LenCertExpire > 0) do={
    :log info ("Detected $LenCertExpire certificate(s) that need updating.");
    /certificate remove $GetCertExpire;
    :set MkcertFetch true;
}
## End Certificate Check

## Initiate Check on DNS Resolution Influence
:set DnsHttps [/ip dns get use-doh-server ];
:set DnsVerify [/ip dns get verify-doh-cert ];

:if ($DnsHttps != "" && $DnsVerify) do={
    /ip dns cache flush
    :delay 3s;

    :do {
        # Attempt to resolve domains
        :resolve letsencrypt.org;
        :resolve mkcert.org;
    } on-error={
        # Temporarily disable DoH certificate verification if DNS resolution fails
        /ip dns set verify-doh-cert=no
        :delay 1s;
        :log warning ("DoH cert verification disabled due to validation failure.");
        :set DnsChanged true;
        :set MkcertFetch true;
        :delay 3s;
    }

}
## End DNS Resolution Check

## Initiate Check on Root CA 'isrg*' Existence
:set GetIsrgID [/certificate find where name ~ "isrg*" ];
:set LenIsrgID [:len $GetIsrgID];

:if ($LenIsrgID = 0) do={
    :set IsrgFile $IsrgUnsafe;
} else={
    :set GetIsrgID [/certificate find where name=$IsrgUnsafe ];
    :set LenIsrgID [:len $GetIsrgID ];

    :if ($LenIsrgID > 0) do={
        :set UseCert "yes";
    } else={
        :set UseCert "yes";
        :set IsrgChecked "yes";
        :log info ("ISRG cert is up to date.")
    }

}
## End Root CA 'isrg*' Check

## Initiate Check on Mkcert CA 'mkcert*' Existence
:set GetMkcertID [/certificate find where name ~ "mkcert*" ];
:set LenMkcertID [:len $GetMkcertID];

:if ($LenMkcertID = 0) do={
    :set MkcertFetch true;
}
## End Mkcert CA 'mkcert*' Check

## Initiate Root CA Update Process
:if ($UseCert = nothing) do={
    :log info ("ISRG cert not detected. Updating...");

    :do {
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=no dst-path=$IsrgFile;
    } on-error={
        # Failed to download the certificate，will be retried in 10 seconds
        :log warning ("Failed to download the ISRG cert. Retrying in 10 seconds.");
        :delay 10s;
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=no dst-path=$IsrgFile;
    }

    :delay 5s;
    :set IsrgFileSize [/file get $IsrgFile size ];

    # If download is successful (file size > 1000), import the certificate
    :if ($IsrgFileSize > 1000) do={
        /certificate import name=$IsrgFile passphrase="" file-name=$IsrgFile;
        :delay 3s;
    } else={
        /file remove $IsrgFile;
        :set IsrgChecked "no";
        :set MkcertFetch false;
        :log error ("ISRG cert is truncated. Size: $IsrgFileSize. Aborting...");
    }

}

:if ($IsrgChecked = nothing) do={
    :log info ("Unsafe ISRG cert detected. Updating...");
    :set Date [/system clock get date ];
    :set IsrgFile "isrgrootx1_$Date";

    :do {
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$IsrgFile;
    } on-error={
        # Failed to download the certificate，will be retried in 10 seconds
        :log warning ("Failed to download the ISRG cert. Retrying in 10 seconds.");
        :delay 10s;
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$IsrgFile;
    }

    :delay 5s;
    :set IsrgFileSize [/file get $IsrgFile size ];

    # If download is successful (file size > 1000), import the certificate
    :if ($IsrgFileSize > 1000) do={
        /certificate remove [find where name ~ "isrg*" ];
        :delay 3s;
        /certificate import name=$IsrgFile passphrase="" file-name=$IsrgFile;
        :set MkcertFetch true;
        :log info ("ISRG cert update completed.");
        :delay 3s;
    } else={
        /file remove $IsrgFile;
        :set MkcertFetch false;
        :log error ("ISRG cert is truncated. Size: $IsrgFileSize. Aborting...");
    }

}
## End Root CA Update Process

## Initiate Mkcert CA Update Process
:if ($MkcertFetch) do={
    :log info ("Mkcert cert requires update. Updating...");
    :set Date [/system clock get date ];
    :set MkcertFile "mkcert_$Date";

    :do {
        :resolve mkcert.org;
        :delay 2s;
        /tool fetch url=$MkcertURL check-certificate=yes dst-path=$MkcertFile;
    } on-error={
        # Failed to download the certificate，will be retried in 10 seconds
        :log warning ("Failed to download the Mkcert cert. Retrying in 10 seconds.");
        :delay 10s;
        :resolve mkcert.org;
        :delay 2s;
        /tool fetch url=$MkcertURL check-certificate=yes dst-path=$MkcertFile;
    }

    :delay 5s;
    :set MkcertFileSize [/file get $MkcertFile size ];

    # If download is successful (file size > 200000), import the certificate
    :if ($MkcertFileSize > 200000) do={
        /certificate remove [find where name ~ "mkcert*" ];
        :delay 3s;
        /certificate import name=$MkcertFile passphrase="" file-name=$MkcertFile;
        :log info ("Mkcert cert update completed.");
        :delay 3s;
    } else={
        /file remove $MkcertFile;
        :log error ("Mkcert cert is truncated. Size: $MkcertFileSize. Aborting...");
    }

} else={
    :log info ("Mkcert cert update skipped.")
}
## End Mkcert CA Update Process

## Initiate DoH Restoration
:if ($DnsChanged) do={
    # Re-enable DoH certificate verification
    /ip dns set verify-doh-cert=yes
    :delay 1s;
    /ip dns cache flush
    :delay 3s;

    :do {
        # Attempt to resolve domains
        :resolve letsencrypt.org;
        :resolve mkcert.org;
        :log warning ("DoH cert verification restored.");
    } on-error={
        # If DNS resolution fails, disable DoH certificate verification
        /ip dns set verify-doh-cert=no
        :delay 1s;
        :log error ("DoH cert verification restoration failed due to validation failure.");
    }

}
## End DoH Restoration

## Fox RouterOS Certificates Updater End

