## Fox RouterOS Certificates Updater
:local LetsencryptURL "https://letsencrypt.org/certs/isrgrootx1.pem";
:local MkcertURL "https://mkcert.org/generate/all/except/nothing";
:local RootCaUnsafe "isrgrootx1_unsafe";
:local GetCertsExpired;
:local LenCertsExpired;
:local DnsHttps;
:local DnsVerify;
:local GetRootCaID;
:local LenRootCaID;
:local RootCaFile;
:local RootCaFileSize;
:local UseCert;
:local RootCaChecked;
:local MkcertFetch;
:local GetMkcertCaID;
:local LenMkcertCaID;
:local MkcertFile;
:local MkcertFileSize;
:local Date;

## Remove old certificates with less than 45 days valid
:set GetCertsExpired [/certificate find where expires-after < 45d ];
:set LenCertsExpired [:len $GetCertsExpired ];

:if ($LenCertsExpired > 0) do={
    /certificate remove $GetCertsExpired;
    :set MkcertFetch true;
    :log info ("Removed $LenCertsExpired expired certificates.");
}
## Remove old certificates End

## Check If DNS Resolution is Affected
:set DnsHttps [/ip dns get use-doh-server ];
:set DnsVerify [/ip dns get verify-doh-cert ];

:if ($DnsHttps != "" && $DnsVerify) do={
    /ip dns cache flush

    :do {
        # Attempt to resolve domains
        :resolve letsencrypt.org;
        :resolve mkcert.org;
    } on-error={
        # Temporarily disable DoH certificate verification if DNS resolution fails
        :log info ("DoH cert verification disabled due to validation failure.");
        /ip dns set verify-doh-cert=no
        :set MkcertFetch true;
        :delay 3s;
    }

}
## Check DNS End

## Check If Root CA Named 'isrg*' Exists
:set GetRootCaID [/certificate find where name ~ "isrg*" ];
:set LenRootCaID [:len $GetRootCaID];

:if ($LenRootCaID = 0) do={
    :set RootCaFile $RootCaUnsafe;
} else={
    :set GetRootCaID [/certificate find where name=$RootCaUnsafe ];
    :set LenRootCaID [:len $GetRootCaID ];

    :if ($LenRootCaID > 0) do={
        :set UseCert "yes";
    } else={
        :set UseCert "yes";
        :set RootCaChecked "yes";
        :log info ("ISRG cert is up to date.")
    }

}
## Check Root CA End

## Check If Mkcert CA Named 'mkcert*' Exists
:set GetMkcertCaID [/certificate find where name ~ "mkcert*" ];
:set LenMkcertCaID [:len $GetMkcertCaID];

:if ($LenMkcertCaID = 0) do={
    :set MkcertFetch true;
}
## Check Mkcert CA End

## Process the Root CA Update
:if ($UseCert = nothing) do={
    :log info ("ISRG cert not detected. Updating...");

    :do {
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=no dst-path=$RootCaFile;
    } on-error={
        # Failed to download the certificate，will be retried in 10 seconds
        :log info ("Failed to download the ISRG cert. Retrying in 10 seconds.");
        :delay 10s;
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=no dst-path=$RootCaFile;
    }

    :delay 5s;
    :set RootCaFileSize [/file get $RootCaFile size ];

    # If download is successful (file size > 1000), import the certificate
    :if ($RootCaFileSize > 1000) do={
        /certificate import name=$RootCaFile passphrase="" file-name=$RootCaFile;
        :delay 3s;
    } else={
        /file remove $RootCaFile;
        :set RootCaChecked "no";
        :set MkcertFetch false;
        :log info ("ISRG cert download failed. Size: $RootCaFileSize. Aborting...");
    }

}

:if ($RootCaChecked = nothing) do={
    :log info ("Unsafe ISRG cert detected. Updating...");
    :set Date [/system clock get date ];
    :set RootCaFile "isrgrootx1_$Date";

    :do {
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$RootCaFile;
    } on-error={
        # Failed to download the certificate，will be retried in 10 seconds
        :log info ("Failed to download the ISRG cert. Retrying in 10 seconds.");
        :delay 10s;
        :resolve letsencrypt.org;
        :delay 2s;
        /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$RootCaFile;
    }

    :delay 5s;
    :set RootCaFileSize [/file get $RootCaFile size ];

    # If download is successful (file size > 1000), import the certificate
    :if ($RootCaFileSize > 1000) do={
        /certificate remove [find where name ~ "isrg*" ];
        :delay 3s;
        /certificate import name=$RootCaFile passphrase="" file-name=$RootCaFile;
        :set MkcertFetch true;
        :delay 3s;
    } else={
        /file remove $RootCaFile;
        :set MkcertFetch false;
        :log info ("ISRG cert download failed. Size: $RootCaFileSize. Aborting...");
    }

}
## Process the Root CA Update End

## Process the Mkcert CA Update
:if ($MkcertFetch) do={
    :log info ("Mkcert cert requires update. Updating...");
    :set Date [/system clock get date ];
    :set MkcertFile "mkcert_$Date";

    :do {
        :resolve mkcert.org;
        :delay 2s;
        /tool fetch url=$MkcertURL check-certificate=yes dst-path=$MkcertFile;
    } on-error={
        # Failed to download the certificate，will be retried in 10 seconds
        :log info ("Failed to download the Mkcert cert. Retrying in 10 seconds.");
        :delay 10s;
        :resolve mkcert.org;
        :delay 2s;
        /tool fetch url=$MkcertURL check-certificate=yes dst-path=$MkcertFile;
    }

    :delay 5s;
    :set MkcertFileSize [/file get $MkcertFile size ];

    # If download is successful (file size > 200000), import the certificate
    :if ($MkcertFileSize > 200000) do={
        /certificate remove [find where name ~ "mkcert*" ];
        :delay 3s;
        /certificate import name=$MkcertFile passphrase="" file-name=$MkcertFile;
        :delay 3s;
    } else={
        /file remove $MkcertFile;
        :log error ("Mkcert cert download failed. Size: $MkcertFileSize. Aborting...");
    }

} else={
    :log info ("Mkcert cert update skipped.")
}
## Process the Mkcert CA Update End

## Process the DoH Restore
:set DnsHttps [/ip dns get use-doh-server ];
:set DnsVerify [/ip dns get verify-doh-cert ];

:if ($DnsHttps != "" && !$DnsVerify) do={
    # Re-enable DoH certificate verification
    /ip dns set verify-doh-cert=yes
    /ip dns cache flush
    :delay 3s;

    :do {
        # Attempt to resolve domains
        :resolve letsencrypt.org;
        :resolve mkcert.org;
        :log info ("DoH cert verification re-enabled.");
    } on-error={
        # If DNS resolution fails, disable DoH certificate verification
        /ip dns set verify-doh-cert=no
        :log info ("DoH cert verification disabled due to validation failure.");
    }

}
## Process the DoH Restore End

## Fox RouterOS Certificates Updater End

