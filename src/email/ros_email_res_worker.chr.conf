## Fox RouterOS Notification
:local Project "Resource Report";
:local WanInterface "pppoe-out1";              # Need to customize
:local UpdateChannel "stable";

## Check For Upgrade
:local SystemVer [/system package update get installed-version ];
:local UpstreamVer;
:local Status;
:local Channel;

:if ($UpstreamVer = nothing) do={
    /system package update set channel=$UpdateChannel
    /system package update check-for-updates
    :delay 10s;
    :set UpstreamVer [/system package update get latest-version ];
    :set Status [/system package update get status ];
    :set Channel [/system package update get channel ];
}
## Check For Upgrade End

## Check Licence Status
:local Level [/system license get level ];
:local Renewal [/system license get next-renewal-at ];
:local Deadline [/system license get deadline-at ];
## Check Licence Status End

## Check CPU Status
:local CpuCores [/system resource get cpu-count ];
:local CpuLoad [/system resource get cpu-load ];
:local CpuFrequency [/system resource get cpu-frequency ];
## Check CPU Status End

## Check Memory Status
:local MemoryFree [/system resource get free-memory ];
:local MemoryTotal [/system resource get total-memory ];
## Check Memory Status End

## Check Disk Status
:local DiskFree [/system resource get free-hdd-space ];
:local DiskTotal [/system resource get total-hdd-space ];
:local DiskWrites [/system resource get write-sect-since-reboot ];
:local DiskWritesTotal [/system resource get write-sect-total ];
## Check Disk Status End

## Check WAN Status
:local WanIPv4 [/ip address get [/ip address find interface=$WanInterface] address ];
:local WanIPv4Network [/ip address get [/ip address find interface=$WanInterface] network ];
:local WanLinkDownTime [/interface get $WanInterface last-link-down-time ];
:local WanLinkUpTime [/interface get $WanInterface last-link-up-time ];
:local WanLinkDowns [/interface get $WanInterface link-downs ];
:local WanTx [/interface get $WanInterface tx-byte ];
:local WanRx [/interface get $WanInterface rx-byte ];
:local WanTxDrop [/interface get $WanInterface tx-drop ];
:local WanRxDrop [/interface get $WanInterface rx-drop ];
:local WanTxError [/interface get $WanInterface tx-error ];
:local WanRxError [/interface get $WanInterface rx-error ];
## Check WAN Status End

## Check WAN IPv6 Status
:local WanIPv6;
:local WanIPv6Prefix;
:local WanIPv6PrefixLength;

:local GetGuaAddress [/ipv6 address find where from-pool ~ ".+" ];
:local LenGuaAddress [:len $GetGuaAddress];
:local IPv6Probe ($GetGuaAddress -> ($LenGuaAddress-1));

:if ($IPv6Probe != nothing) do={
    # Check IPv6 Status Passed
    :set WanIPv6 [/ipv6 address get $IPv6Probe address ];
    :set WanIPv6Prefix [/ipv6 dhcp-client get $WanInterface prefix ];
    :set WanIPv6PrefixLength [/ipv6 dhcp-client get $WanInterface pool-prefix-length ];
} else={
    # Check IPv6 Status Failed
    :set WanIPv6 "N/A";
    :set WanIPv6Prefix "N/A";
    :set WanIPv6PrefixLength "N/A";
}
## Check WAN IPv6 Status End

## Resolve Mail Server
:local MailServer "<smtp.xxx.com>";            # Need to customize
:local MailPort "465";
:local MailTls "yes";
:local SendFrom "<your-email-x@xxx.com>";      # Need to customize
:local SendTo "<your-email-y@yyy.com>";        # Need to customize
:local MailIp;
:set MailIp [:resolve $MailServer ];
:delay 1s;
## Resolve End

:local DeviceName [/system identity get name ];
:local Time [/system clock get time ];
:local Date [/system clock get date ];
:local Uptime [/system resource get uptime ];

/tool e-mail send server=$MailIp port=$MailPort tls=$MailTls from=$SendFrom to=$SendTo \
subject="$DeviceName $Project: [Uptime: $Uptime] [$Date $Time]" \
body="
=====>   RouterOS Report   <===== \n

Router host name: $DeviceName \n
System date: $Date $Time \n
System uptime: $Uptime \n

System status: $Status \n
Upstream version: $UpstreamVer ( channel: $Channel ) \n
Installed version: $SystemVer \n

System licence level: $Level \n
Renewal time: $Renewal \n
Deadline time: $Deadline \n

=====>   Extranet Status   <===== \n

WAN interface: $WanInterface \n

Last link down time: $WanLinkDownTime \n
Last link up time: $WanLinkUpTime \n
Link downs: $WanLinkDowns \n

IPv4 address: $WanIPv4 \n
Network: $WanIPv4Network \n

Prefix: $WanIPv6Prefix \n
IPv6 address: $WanIPv6 \n
Pool prefix length: $WanIPv6PrefixLength \n

WAN Tx: $[($WanTx / 1048576)] MiB ( as $[($WanTx / 1073741824)] GiB ) \n
WAN Rx: $[($WanRx / 1048576)] MiB ( as $[($WanRx / 1073741824)] GiB ) \n

WAN Tx quality: Drop $WanTxDrop , Error $WanTxError \n
WAN Rx quality: Drop $WanRxDrop , Error $WanRxError \n

=====>   CPU   <===== \n

Core: $CpuCores Cores \n
Load: $CpuLoad % \n
Frequency: $CpuFrequency MHz \n

=====>   Memory   <===== \n

Free:  $[($MemoryFree / 1048576)] MiB \n
Total: $[($MemoryTotal / 1048576)] MiB \n
Used:  $[(($MemoryTotal / 1048576) - ($MemoryFree / 1048576))] MiB \n

=====>   Disk   <===== \n

Free:  $[($DiskFree / 1048576)] MiB \n
Total: $[($DiskTotal / 1048576)] MiB \n
Used:  $[(($DiskTotal / 1048576) - ($DiskFree / 1048576))] MiB \n

Sector Writes Since Reboot: $DiskWrites \n
Total Sector Writes: $DiskWritesTotal \n
"
## Fox RouterOS Notification End

